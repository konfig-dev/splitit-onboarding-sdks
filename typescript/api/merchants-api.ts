/* tslint:disable */
/* eslint-disable */
/**
 * Splitit.OnBoarding.Api.V2
 * Splitit\'s Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by Konfig (https://konfigthis.com).
 * https://konfigthis.com
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDeveloperRequest } from '../models';
// @ts-ignore
import { CreateMerchantRequest } from '../models';
// @ts-ignore
import { CreateMerchantResponse } from '../models';
// @ts-ignore
import { GetMerchantDetailsResponse } from '../models';
// @ts-ignore
import { GetMerchantsResponse } from '../models';
// @ts-ignore
import { SelfOnBoardingErrorResponse } from '../models';
import { paginate } from "../pagination/paginate";
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * MerchantsApi - axios parameter creator
 * @export
 */
export const MerchantsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateMerchantRequest} createMerchantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createMerchantRequest: CreateMerchantRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMerchantRequest' is not null or undefined
            assertParamExists('create', 'createMerchantRequest', createMerchantRequest)
            const localVarPath = `/api/merchants/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMerchantRequest, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateDeveloperRequest} createDeveloperRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeveloper: async (createDeveloperRequest: CreateDeveloperRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDeveloperRequest' is not null or undefined
            assertParamExists('createDeveloper', 'createDeveloperRequest', createDeveloperRequest)
            const localVarPath = `/api/merchants/create/developer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDeveloperRequest, localVarRequestOptions, configuration)

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} numberOfRowsInPage 
         * @param {number} pageNumber 
         * @param {string} [name] 
         * @param {string} [legalName] 
         * @param {number} [status] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (numberOfRowsInPage: number, pageNumber: number, name?: string, legalName?: string, status?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'numberOfRowsInPage' is not null or undefined
            assertParamExists('get', 'numberOfRowsInPage', numberOfRowsInPage)
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('get', 'pageNumber', pageNumber)
            const localVarPath = `/api/merchants/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (numberOfRowsInPage !== undefined) {
                localVarQueryParameter['NumberOfRowsInPage'] = numberOfRowsInPage;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['PageNumber'] = pageNumber;
            }

            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }

            if (legalName !== undefined) {
                localVarQueryParameter['LegalName'] = legalName;
            }

            if (status !== undefined) {
                localVarQueryParameter['Status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} merchantTempId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (merchantTempId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantTempId' is not null or undefined
            assertParamExists('getDetails', 'merchantTempId', merchantTempId)
            const localVarPath = `/api/merchants/get-details`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "oauth2", [], configuration)

            if (merchantTempId !== undefined) {
                localVarQueryParameter['merchantTempId'] = merchantTempId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            requestBeforeHook({
              queryParameters: localVarQueryParameter,
              requestConfig: localVarRequestOptions,
              path: localVarPath,
              configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantsApi - functional programming interface
 * @export
 */
export const MerchantsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MerchantsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: MerchantsApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMerchantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MerchantsApiCreateDeveloperRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeveloper(requestParameters: MerchantsApiCreateDeveloperRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMerchantResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDeveloper(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MerchantsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: MerchantsApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMerchantsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.numberOfRowsInPage, requestParameters.pageNumber, requestParameters.name, requestParameters.legalName, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {MerchantsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: MerchantsApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMerchantDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.merchantTempId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantsApi - factory interface
 * @export
 */
export const MerchantsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantsApiFp(configuration)
    return {
        /**
         * 
         * @param {MerchantsApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: MerchantsApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<CreateMerchantResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MerchantsApiCreateDeveloperRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeveloper(requestParameters: MerchantsApiCreateDeveloperRequest, options?: AxiosRequestConfig): AxiosPromise<CreateMerchantResponse> {
            return localVarFp.createDeveloper(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MerchantsApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: MerchantsApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<GetMerchantsResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {MerchantsApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: MerchantsApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<GetMerchantDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in MerchantsApi.
 * @export
 * @interface MerchantsApiCreateRequest
 */
export type MerchantsApiCreateRequest = {
    
} & CreateMerchantRequest

/**
 * Request parameters for createDeveloper operation in MerchantsApi.
 * @export
 * @interface MerchantsApiCreateDeveloperRequest
 */
export type MerchantsApiCreateDeveloperRequest = {
    
} & CreateDeveloperRequest

/**
 * Request parameters for get operation in MerchantsApi.
 * @export
 * @interface MerchantsApiGetRequest
 */
export type MerchantsApiGetRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof MerchantsApiGet
    */
    readonly numberOfRowsInPage: number
    
    /**
    * 
    * @type {number}
    * @memberof MerchantsApiGet
    */
    readonly pageNumber: number
    
    /**
    * 
    * @type {string}
    * @memberof MerchantsApiGet
    */
    readonly name?: string
    
    /**
    * 
    * @type {string}
    * @memberof MerchantsApiGet
    */
    readonly legalName?: string
    
    /**
    * 
    * @type {number}
    * @memberof MerchantsApiGet
    */
    readonly status?: number
    
}

/**
 * Request parameters for getDetails operation in MerchantsApi.
 * @export
 * @interface MerchantsApiGetDetailsRequest
 */
export type MerchantsApiGetDetailsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof MerchantsApiGetDetails
    */
    readonly merchantTempId: string
    
}

/**
 * MerchantsApi - object-oriented interface
 * @export
 * @class MerchantsApi
 * @extends {BaseAPI}
 */
export class MerchantsApi extends BaseAPI {
    /**
     * 
     * @param {MerchantsApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public create(requestParameters: MerchantsApiCreateRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MerchantsApiCreateDeveloperRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public createDeveloper(requestParameters: MerchantsApiCreateDeveloperRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).createDeveloper(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MerchantsApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public get(requestParameters: MerchantsApiGetRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {MerchantsApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantsApi
     */
    public getDetails(requestParameters: MerchantsApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return MerchantsApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
