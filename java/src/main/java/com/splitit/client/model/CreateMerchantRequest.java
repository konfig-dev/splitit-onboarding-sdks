/*
 * Splitit.OnBoarding.Api.V2
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.splitit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.splitit.client.JSON;

/**
 * CreateMerchantRequest
 */
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateMerchantRequest {
  public static final String SERIALIZED_NAME_PUBLIC_NAME = "publicName";
  @SerializedName(SERIALIZED_NAME_PUBLIC_NAME)
  private String publicName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_COUNTRY_ISO2 = "countryIso2";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO2)
  private String countryIso2;

  public static final String SERIALIZED_NAME_LEGAL_NAME = "legalName";
  @SerializedName(SERIALIZED_NAME_LEGAL_NAME)
  private String legalName;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private String tier;

  public static final String SERIALIZED_NAME_BUSINESS_STREET_ADDRESS = "businessStreetAddress";
  @SerializedName(SERIALIZED_NAME_BUSINESS_STREET_ADDRESS)
  private String businessStreetAddress;

  public static final String SERIALIZED_NAME_BUSINESS_CITY = "businessCity";
  @SerializedName(SERIALIZED_NAME_BUSINESS_CITY)
  private String businessCity;

  public static final String SERIALIZED_NAME_BUSINESS_POSTAL_CODE = "businessPostalCode";
  @SerializedName(SERIALIZED_NAME_BUSINESS_POSTAL_CODE)
  private String businessPostalCode;

  public static final String SERIALIZED_NAME_BUSINESS_COUNTRY = "businessCountry";
  @SerializedName(SERIALIZED_NAME_BUSINESS_COUNTRY)
  private String businessCountry;

  public static final String SERIALIZED_NAME_BUSINESS_STATE = "businessState";
  @SerializedName(SERIALIZED_NAME_BUSINESS_STATE)
  private String businessState;

  public static final String SERIALIZED_NAME_VERTICAL = "vertical";
  @SerializedName(SERIALIZED_NAME_VERTICAL)
  private String vertical;

  public static final String SERIALIZED_NAME_SUB_VERTICAL = "subVertical";
  @SerializedName(SERIALIZED_NAME_SUB_VERTICAL)
  private String subVertical;

  public static final String SERIALIZED_NAME_NAME_ON_BANK_ACCOUNT = "nameOnBankAccount";
  @SerializedName(SERIALIZED_NAME_NAME_ON_BANK_ACCOUNT)
  private String nameOnBankAccount;

  public static final String SERIALIZED_NAME_INCORPORATION_COUNTRY = "incorporationCountry";
  @SerializedName(SERIALIZED_NAME_INCORPORATION_COUNTRY)
  private String incorporationCountry;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ROUTING_NUMBER = "routingNumber";
  @SerializedName(SERIALIZED_NAME_ROUTING_NUMBER)
  private String routingNumber;

  public static final String SERIALIZED_NAME_TAX_ID_NUMBER = "taxIdNumber";
  @SerializedName(SERIALIZED_NAME_TAX_ID_NUMBER)
  private String taxIdNumber;

  public static final String SERIALIZED_NAME_TOTAL_ANNUAL_SALES = "totalAnnualSales";
  @SerializedName(SERIALIZED_NAME_TOTAL_ANNUAL_SALES)
  private String totalAnnualSales;

  public static final String SERIALIZED_NAME_PLATFORM_NAME = "platformName";
  @SerializedName(SERIALIZED_NAME_PLATFORM_NAME)
  private String platformName;

  public CreateMerchantRequest() {
  }

  public CreateMerchantRequest publicName(String publicName) {
    
    this.publicName = publicName;
    return this;
  }

   /**
   * Get publicName
   * @return publicName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPublicName() {
    return publicName;
  }


  public void setPublicName(String publicName) {
    this.publicName = publicName;
  }


  public CreateMerchantRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public CreateMerchantRequest phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getPhoneNumber() {
    return phoneNumber;
  }


  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public CreateMerchantRequest countryIso2(String countryIso2) {
    
    this.countryIso2 = countryIso2;
    return this;
  }

   /**
   * Get countryIso2
   * @return countryIso2
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCountryIso2() {
    return countryIso2;
  }


  public void setCountryIso2(String countryIso2) {
    this.countryIso2 = countryIso2;
  }


  public CreateMerchantRequest legalName(String legalName) {
    
    this.legalName = legalName;
    return this;
  }

   /**
   * Get legalName
   * @return legalName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getLegalName() {
    return legalName;
  }


  public void setLegalName(String legalName) {
    this.legalName = legalName;
  }


  public CreateMerchantRequest currencyCode(String currencyCode) {
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public CreateMerchantRequest tier(String tier) {
    
    this.tier = tier;
    return this;
  }

   /**
   * Get tier
   * @return tier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTier() {
    return tier;
  }


  public void setTier(String tier) {
    this.tier = tier;
  }


  public CreateMerchantRequest businessStreetAddress(String businessStreetAddress) {
    
    this.businessStreetAddress = businessStreetAddress;
    return this;
  }

   /**
   * Get businessStreetAddress
   * @return businessStreetAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBusinessStreetAddress() {
    return businessStreetAddress;
  }


  public void setBusinessStreetAddress(String businessStreetAddress) {
    this.businessStreetAddress = businessStreetAddress;
  }


  public CreateMerchantRequest businessCity(String businessCity) {
    
    this.businessCity = businessCity;
    return this;
  }

   /**
   * Get businessCity
   * @return businessCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBusinessCity() {
    return businessCity;
  }


  public void setBusinessCity(String businessCity) {
    this.businessCity = businessCity;
  }


  public CreateMerchantRequest businessPostalCode(String businessPostalCode) {
    
    this.businessPostalCode = businessPostalCode;
    return this;
  }

   /**
   * Get businessPostalCode
   * @return businessPostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBusinessPostalCode() {
    return businessPostalCode;
  }


  public void setBusinessPostalCode(String businessPostalCode) {
    this.businessPostalCode = businessPostalCode;
  }


  public CreateMerchantRequest businessCountry(String businessCountry) {
    
    this.businessCountry = businessCountry;
    return this;
  }

   /**
   * Get businessCountry
   * @return businessCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBusinessCountry() {
    return businessCountry;
  }


  public void setBusinessCountry(String businessCountry) {
    this.businessCountry = businessCountry;
  }


  public CreateMerchantRequest businessState(String businessState) {
    
    this.businessState = businessState;
    return this;
  }

   /**
   * Get businessState
   * @return businessState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBusinessState() {
    return businessState;
  }


  public void setBusinessState(String businessState) {
    this.businessState = businessState;
  }


  public CreateMerchantRequest vertical(String vertical) {
    
    this.vertical = vertical;
    return this;
  }

   /**
   * Get vertical
   * @return vertical
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getVertical() {
    return vertical;
  }


  public void setVertical(String vertical) {
    this.vertical = vertical;
  }


  public CreateMerchantRequest subVertical(String subVertical) {
    
    this.subVertical = subVertical;
    return this;
  }

   /**
   * Get subVertical
   * @return subVertical
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubVertical() {
    return subVertical;
  }


  public void setSubVertical(String subVertical) {
    this.subVertical = subVertical;
  }


  public CreateMerchantRequest nameOnBankAccount(String nameOnBankAccount) {
    
    this.nameOnBankAccount = nameOnBankAccount;
    return this;
  }

   /**
   * Get nameOnBankAccount
   * @return nameOnBankAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNameOnBankAccount() {
    return nameOnBankAccount;
  }


  public void setNameOnBankAccount(String nameOnBankAccount) {
    this.nameOnBankAccount = nameOnBankAccount;
  }


  public CreateMerchantRequest incorporationCountry(String incorporationCountry) {
    
    this.incorporationCountry = incorporationCountry;
    return this;
  }

   /**
   * Get incorporationCountry
   * @return incorporationCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIncorporationCountry() {
    return incorporationCountry;
  }


  public void setIncorporationCountry(String incorporationCountry) {
    this.incorporationCountry = incorporationCountry;
  }


  public CreateMerchantRequest accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CreateMerchantRequest routingNumber(String routingNumber) {
    
    this.routingNumber = routingNumber;
    return this;
  }

   /**
   * Get routingNumber
   * @return routingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRoutingNumber() {
    return routingNumber;
  }


  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }


  public CreateMerchantRequest taxIdNumber(String taxIdNumber) {
    
    this.taxIdNumber = taxIdNumber;
    return this;
  }

   /**
   * Get taxIdNumber
   * @return taxIdNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxIdNumber() {
    return taxIdNumber;
  }


  public void setTaxIdNumber(String taxIdNumber) {
    this.taxIdNumber = taxIdNumber;
  }


  public CreateMerchantRequest totalAnnualSales(String totalAnnualSales) {
    
    this.totalAnnualSales = totalAnnualSales;
    return this;
  }

   /**
   * Get totalAnnualSales
   * @return totalAnnualSales
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTotalAnnualSales() {
    return totalAnnualSales;
  }


  public void setTotalAnnualSales(String totalAnnualSales) {
    this.totalAnnualSales = totalAnnualSales;
  }


  public CreateMerchantRequest platformName(String platformName) {
    
    this.platformName = platformName;
    return this;
  }

   /**
   * Get platformName
   * @return platformName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPlatformName() {
    return platformName;
  }


  public void setPlatformName(String platformName) {
    this.platformName = platformName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMerchantRequest createMerchantRequest = (CreateMerchantRequest) o;
    return Objects.equals(this.publicName, createMerchantRequest.publicName) &&
        Objects.equals(this.email, createMerchantRequest.email) &&
        Objects.equals(this.phoneNumber, createMerchantRequest.phoneNumber) &&
        Objects.equals(this.countryIso2, createMerchantRequest.countryIso2) &&
        Objects.equals(this.legalName, createMerchantRequest.legalName) &&
        Objects.equals(this.currencyCode, createMerchantRequest.currencyCode) &&
        Objects.equals(this.tier, createMerchantRequest.tier) &&
        Objects.equals(this.businessStreetAddress, createMerchantRequest.businessStreetAddress) &&
        Objects.equals(this.businessCity, createMerchantRequest.businessCity) &&
        Objects.equals(this.businessPostalCode, createMerchantRequest.businessPostalCode) &&
        Objects.equals(this.businessCountry, createMerchantRequest.businessCountry) &&
        Objects.equals(this.businessState, createMerchantRequest.businessState) &&
        Objects.equals(this.vertical, createMerchantRequest.vertical) &&
        Objects.equals(this.subVertical, createMerchantRequest.subVertical) &&
        Objects.equals(this.nameOnBankAccount, createMerchantRequest.nameOnBankAccount) &&
        Objects.equals(this.incorporationCountry, createMerchantRequest.incorporationCountry) &&
        Objects.equals(this.accountNumber, createMerchantRequest.accountNumber) &&
        Objects.equals(this.routingNumber, createMerchantRequest.routingNumber) &&
        Objects.equals(this.taxIdNumber, createMerchantRequest.taxIdNumber) &&
        Objects.equals(this.totalAnnualSales, createMerchantRequest.totalAnnualSales) &&
        Objects.equals(this.platformName, createMerchantRequest.platformName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publicName, email, phoneNumber, countryIso2, legalName, currencyCode, tier, businessStreetAddress, businessCity, businessPostalCode, businessCountry, businessState, vertical, subVertical, nameOnBankAccount, incorporationCountry, accountNumber, routingNumber, taxIdNumber, totalAnnualSales, platformName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMerchantRequest {\n");
    sb.append("    publicName: ").append(toIndentedString(publicName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    countryIso2: ").append(toIndentedString(countryIso2)).append("\n");
    sb.append("    legalName: ").append(toIndentedString(legalName)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    businessStreetAddress: ").append(toIndentedString(businessStreetAddress)).append("\n");
    sb.append("    businessCity: ").append(toIndentedString(businessCity)).append("\n");
    sb.append("    businessPostalCode: ").append(toIndentedString(businessPostalCode)).append("\n");
    sb.append("    businessCountry: ").append(toIndentedString(businessCountry)).append("\n");
    sb.append("    businessState: ").append(toIndentedString(businessState)).append("\n");
    sb.append("    vertical: ").append(toIndentedString(vertical)).append("\n");
    sb.append("    subVertical: ").append(toIndentedString(subVertical)).append("\n");
    sb.append("    nameOnBankAccount: ").append(toIndentedString(nameOnBankAccount)).append("\n");
    sb.append("    incorporationCountry: ").append(toIndentedString(incorporationCountry)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    taxIdNumber: ").append(toIndentedString(taxIdNumber)).append("\n");
    sb.append("    totalAnnualSales: ").append(toIndentedString(totalAnnualSales)).append("\n");
    sb.append("    platformName: ").append(toIndentedString(platformName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("publicName");
    openapiFields.add("email");
    openapiFields.add("phoneNumber");
    openapiFields.add("countryIso2");
    openapiFields.add("legalName");
    openapiFields.add("currencyCode");
    openapiFields.add("tier");
    openapiFields.add("businessStreetAddress");
    openapiFields.add("businessCity");
    openapiFields.add("businessPostalCode");
    openapiFields.add("businessCountry");
    openapiFields.add("businessState");
    openapiFields.add("vertical");
    openapiFields.add("subVertical");
    openapiFields.add("nameOnBankAccount");
    openapiFields.add("incorporationCountry");
    openapiFields.add("accountNumber");
    openapiFields.add("routingNumber");
    openapiFields.add("taxIdNumber");
    openapiFields.add("totalAnnualSales");
    openapiFields.add("platformName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("publicName");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("phoneNumber");
    openapiRequiredFields.add("countryIso2");
    openapiRequiredFields.add("legalName");
    openapiRequiredFields.add("currencyCode");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateMerchantRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateMerchantRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateMerchantRequest is not found in the empty JSON string", CreateMerchantRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateMerchantRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateMerchantRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateMerchantRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("publicName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicName").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if (!jsonObj.get("countryIso2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryIso2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryIso2").toString()));
      }
      if (!jsonObj.get("legalName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalName").toString()));
      }
      if (!jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      if ((jsonObj.get("businessStreetAddress") != null && !jsonObj.get("businessStreetAddress").isJsonNull()) && !jsonObj.get("businessStreetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessStreetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessStreetAddress").toString()));
      }
      if ((jsonObj.get("businessCity") != null && !jsonObj.get("businessCity").isJsonNull()) && !jsonObj.get("businessCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessCity").toString()));
      }
      if ((jsonObj.get("businessPostalCode") != null && !jsonObj.get("businessPostalCode").isJsonNull()) && !jsonObj.get("businessPostalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessPostalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessPostalCode").toString()));
      }
      if ((jsonObj.get("businessCountry") != null && !jsonObj.get("businessCountry").isJsonNull()) && !jsonObj.get("businessCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessCountry").toString()));
      }
      if ((jsonObj.get("businessState") != null && !jsonObj.get("businessState").isJsonNull()) && !jsonObj.get("businessState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessState").toString()));
      }
      if ((jsonObj.get("vertical") != null && !jsonObj.get("vertical").isJsonNull()) && !jsonObj.get("vertical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vertical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vertical").toString()));
      }
      if ((jsonObj.get("subVertical") != null && !jsonObj.get("subVertical").isJsonNull()) && !jsonObj.get("subVertical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subVertical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subVertical").toString()));
      }
      if ((jsonObj.get("nameOnBankAccount") != null && !jsonObj.get("nameOnBankAccount").isJsonNull()) && !jsonObj.get("nameOnBankAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameOnBankAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameOnBankAccount").toString()));
      }
      if ((jsonObj.get("incorporationCountry") != null && !jsonObj.get("incorporationCountry").isJsonNull()) && !jsonObj.get("incorporationCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incorporationCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incorporationCountry").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("routingNumber") != null && !jsonObj.get("routingNumber").isJsonNull()) && !jsonObj.get("routingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routingNumber").toString()));
      }
      if ((jsonObj.get("taxIdNumber") != null && !jsonObj.get("taxIdNumber").isJsonNull()) && !jsonObj.get("taxIdNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxIdNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxIdNumber").toString()));
      }
      if ((jsonObj.get("totalAnnualSales") != null && !jsonObj.get("totalAnnualSales").isJsonNull()) && !jsonObj.get("totalAnnualSales").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `totalAnnualSales` to be a primitive type in the JSON string but got `%s`", jsonObj.get("totalAnnualSales").toString()));
      }
      if ((jsonObj.get("platformName") != null && !jsonObj.get("platformName").isJsonNull()) && !jsonObj.get("platformName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateMerchantRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateMerchantRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateMerchantRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateMerchantRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateMerchantRequest>() {
           @Override
           public void write(JsonWriter out, CreateMerchantRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateMerchantRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateMerchantRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateMerchantRequest
  * @throws IOException if the JSON string is invalid with respect to CreateMerchantRequest
  */
  public static CreateMerchantRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateMerchantRequest.class);
  }

 /**
  * Convert an instance of CreateMerchantRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

