/*
 * Splitit.OnBoarding.Api.V2
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.splitit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.splitit.client.JSON;

/**
 * MerchantVerticalResponse
 */
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MerchantVerticalResponse {
  public static final String SERIALIZED_NAME_VERTICAL_DISPLAY_NAME = "verticalDisplayName";
  @SerializedName(SERIALIZED_NAME_VERTICAL_DISPLAY_NAME)
  private String verticalDisplayName;

  public static final String SERIALIZED_NAME_VERTICAL_SPLITIT_NAME = "verticalSplititName";
  @SerializedName(SERIALIZED_NAME_VERTICAL_SPLITIT_NAME)
  private String verticalSplititName;

  public static final String SERIALIZED_NAME_SUB_CATEGORIES = "subCategories";
  @SerializedName(SERIALIZED_NAME_SUB_CATEGORIES)
  private List<String> subCategories = new ArrayList<>();

  public MerchantVerticalResponse() {
  }

  public MerchantVerticalResponse verticalDisplayName(String verticalDisplayName) {
    
    this.verticalDisplayName = verticalDisplayName;
    return this;
  }

   /**
   * Get verticalDisplayName
   * @return verticalDisplayName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getVerticalDisplayName() {
    return verticalDisplayName;
  }


  public void setVerticalDisplayName(String verticalDisplayName) {
    this.verticalDisplayName = verticalDisplayName;
  }


  public MerchantVerticalResponse verticalSplititName(String verticalSplititName) {
    
    this.verticalSplititName = verticalSplititName;
    return this;
  }

   /**
   * Get verticalSplititName
   * @return verticalSplititName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getVerticalSplititName() {
    return verticalSplititName;
  }


  public void setVerticalSplititName(String verticalSplititName) {
    this.verticalSplititName = verticalSplititName;
  }


  public MerchantVerticalResponse subCategories(List<String> subCategories) {
    
    this.subCategories = subCategories;
    return this;
  }

  public MerchantVerticalResponse addSubCategoriesItem(String subCategoriesItem) {
    this.subCategories.add(subCategoriesItem);
    return this;
  }

   /**
   * Get subCategories
   * @return subCategories
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getSubCategories() {
    return subCategories;
  }


  public void setSubCategories(List<String> subCategories) {
    this.subCategories = subCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantVerticalResponse merchantVerticalResponse = (MerchantVerticalResponse) o;
    return Objects.equals(this.verticalDisplayName, merchantVerticalResponse.verticalDisplayName) &&
        Objects.equals(this.verticalSplititName, merchantVerticalResponse.verticalSplititName) &&
        Objects.equals(this.subCategories, merchantVerticalResponse.subCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verticalDisplayName, verticalSplititName, subCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantVerticalResponse {\n");
    sb.append("    verticalDisplayName: ").append(toIndentedString(verticalDisplayName)).append("\n");
    sb.append("    verticalSplititName: ").append(toIndentedString(verticalSplititName)).append("\n");
    sb.append("    subCategories: ").append(toIndentedString(subCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("verticalDisplayName");
    openapiFields.add("verticalSplititName");
    openapiFields.add("subCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("verticalDisplayName");
    openapiRequiredFields.add("verticalSplititName");
    openapiRequiredFields.add("subCategories");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MerchantVerticalResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MerchantVerticalResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantVerticalResponse is not found in the empty JSON string", MerchantVerticalResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MerchantVerticalResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantVerticalResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MerchantVerticalResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("verticalDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verticalDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verticalDisplayName").toString()));
      }
      if (!jsonObj.get("verticalSplititName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verticalSplititName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verticalSplititName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("subCategories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("subCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subCategories` to be an array in the JSON string but got `%s`", jsonObj.get("subCategories").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantVerticalResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantVerticalResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantVerticalResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantVerticalResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantVerticalResponse>() {
           @Override
           public void write(JsonWriter out, MerchantVerticalResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantVerticalResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MerchantVerticalResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MerchantVerticalResponse
  * @throws IOException if the JSON string is invalid with respect to MerchantVerticalResponse
  */
  public static MerchantVerticalResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantVerticalResponse.class);
  }

 /**
  * Convert an instance of MerchantVerticalResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

