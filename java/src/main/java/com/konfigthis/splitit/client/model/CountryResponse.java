/*
 * Splitit.OnBoarding.Api.V2
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.splitit.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.splitit.client.JSON;

/**
 * CountryResponse
 */
@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CountryResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ISO_A2 = "isoA2";
  @SerializedName(SERIALIZED_NAME_ISO_A2)
  private String isoA2;

  public static final String SERIALIZED_NAME_ISO_A3 = "isoA3";
  @SerializedName(SERIALIZED_NAME_ISO_A3)
  private String isoA3;

  public static final String SERIALIZED_NAME_ISO_NUMBER = "isoNumber";
  @SerializedName(SERIALIZED_NAME_ISO_NUMBER)
  private String isoNumber;

  public CountryResponse() {
  }

  public CountryResponse id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public CountryResponse name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CountryResponse isoA2(String isoA2) {
    
    this.isoA2 = isoA2;
    return this;
  }

   /**
   * Get isoA2
   * @return isoA2
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getIsoA2() {
    return isoA2;
  }


  public void setIsoA2(String isoA2) {
    this.isoA2 = isoA2;
  }


  public CountryResponse isoA3(String isoA3) {
    
    this.isoA3 = isoA3;
    return this;
  }

   /**
   * Get isoA3
   * @return isoA3
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getIsoA3() {
    return isoA3;
  }


  public void setIsoA3(String isoA3) {
    this.isoA3 = isoA3;
  }


  public CountryResponse isoNumber(String isoNumber) {
    
    this.isoNumber = isoNumber;
    return this;
  }

   /**
   * Get isoNumber
   * @return isoNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getIsoNumber() {
    return isoNumber;
  }


  public void setIsoNumber(String isoNumber) {
    this.isoNumber = isoNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountryResponse countryResponse = (CountryResponse) o;
    return Objects.equals(this.id, countryResponse.id) &&
        Objects.equals(this.name, countryResponse.name) &&
        Objects.equals(this.isoA2, countryResponse.isoA2) &&
        Objects.equals(this.isoA3, countryResponse.isoA3) &&
        Objects.equals(this.isoNumber, countryResponse.isoNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, isoA2, isoA3, isoNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountryResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isoA2: ").append(toIndentedString(isoA2)).append("\n");
    sb.append("    isoA3: ").append(toIndentedString(isoA3)).append("\n");
    sb.append("    isoNumber: ").append(toIndentedString(isoNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("isoA2");
    openapiFields.add("isoA3");
    openapiFields.add("isoNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("isoA2");
    openapiRequiredFields.add("isoA3");
    openapiRequiredFields.add("isoNumber");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CountryResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CountryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountryResponse is not found in the empty JSON string", CountryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CountryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountryResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CountryResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("isoA2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoA2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoA2").toString()));
      }
      if (!jsonObj.get("isoA3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoA3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoA3").toString()));
      }
      if (!jsonObj.get("isoNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CountryResponse>() {
           @Override
           public void write(JsonWriter out, CountryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountryResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CountryResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CountryResponse
  * @throws IOException if the JSON string is invalid with respect to CountryResponse
  */
  public static CountryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountryResponse.class);
  }

 /**
  * Convert an instance of CountryResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

