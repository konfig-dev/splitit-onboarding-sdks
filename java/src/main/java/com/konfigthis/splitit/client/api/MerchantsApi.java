/*
 * Splitit.OnBoarding.Api.V2
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.splitit.client.api;

import com.konfigthis.splitit.client.ApiCallback;
import com.konfigthis.splitit.client.ApiClient;
import com.konfigthis.splitit.client.ApiException;
import com.konfigthis.splitit.client.ApiResponse;
import com.konfigthis.splitit.client.Configuration;
import com.konfigthis.splitit.client.Pair;
import com.konfigthis.splitit.client.ProgressRequestBody;
import com.konfigthis.splitit.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.splitit.client.model.CreateMerchantRequest;
import com.konfigthis.splitit.client.model.CreateMerchantResponse;
import com.konfigthis.splitit.client.model.GetMerchantDetailsResponse;
import com.konfigthis.splitit.client.model.GetMerchantsResponse;
import com.konfigthis.splitit.client.model.SelfOnBoardingErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MerchantsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createMerchant
     * @param createMerchantRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMerchantCall(CreateMerchantRequest createMerchantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMerchantRequest;

        // create path and map variables
        String localVarPath = "/api/merchants/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMerchantValidateBeforeCall(CreateMerchantRequest createMerchantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createMerchantRequest' is set
        if (createMerchantRequest == null) {
            throw new ApiException("Missing the required parameter 'createMerchantRequest' when calling createMerchant(Async)");
        }

        return createMerchantCall(createMerchantRequest, _callback);

    }

    /**
     * 
     * 
     * @param createMerchantRequest  (required)
     * @return CreateMerchantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateMerchantResponse createMerchant(CreateMerchantRequest createMerchantRequest) throws ApiException {
        ApiResponse<CreateMerchantResponse> localVarResp = createMerchantWithHttpInfo(createMerchantRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createMerchantRequest  (required)
     * @return ApiResponse&lt;CreateMerchantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMerchantResponse> createMerchantWithHttpInfo(CreateMerchantRequest createMerchantRequest) throws ApiException {
        okhttp3.Call localVarCall = createMerchantValidateBeforeCall(createMerchantRequest, null);
        Type localVarReturnType = new TypeToken<CreateMerchantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createMerchantRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMerchantAsync(CreateMerchantRequest createMerchantRequest, final ApiCallback<CreateMerchantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMerchantValidateBeforeCall(createMerchantRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateMerchantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantDetails
     * @param merchantTempId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantDetailsCall(String merchantTempId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/merchants/get-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (merchantTempId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantTempId", merchantTempId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantDetailsValidateBeforeCall(String merchantTempId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantTempId' is set
        if (merchantTempId == null) {
            throw new ApiException("Missing the required parameter 'merchantTempId' when calling getMerchantDetails(Async)");
        }

        return getMerchantDetailsCall(merchantTempId, _callback);

    }

    /**
     * 
     * 
     * @param merchantTempId  (required)
     * @return GetMerchantDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantDetailsResponse getMerchantDetails(String merchantTempId) throws ApiException {
        ApiResponse<GetMerchantDetailsResponse> localVarResp = getMerchantDetailsWithHttpInfo(merchantTempId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param merchantTempId  (required)
     * @return ApiResponse&lt;GetMerchantDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantDetailsResponse> getMerchantDetailsWithHttpInfo(String merchantTempId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantDetailsValidateBeforeCall(merchantTempId, null);
        Type localVarReturnType = new TypeToken<GetMerchantDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param merchantTempId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantDetailsAsync(String merchantTempId, final ApiCallback<GetMerchantDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantDetailsValidateBeforeCall(merchantTempId, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchants
     * @param numberOfRowsInPage  (required)
     * @param pageNumber  (required)
     * @param name  (optional)
     * @param legalName  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsCall(Integer numberOfRowsInPage, Integer pageNumber, String name, String legalName, Integer status, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/merchants/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numberOfRowsInPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NumberOfRowsInPage", numberOfRowsInPage));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PageNumber", pageNumber));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Name", name));
        }

        if (legalName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LegalName", legalName));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantsValidateBeforeCall(Integer numberOfRowsInPage, Integer pageNumber, String name, String legalName, Integer status, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'numberOfRowsInPage' is set
        if (numberOfRowsInPage == null) {
            throw new ApiException("Missing the required parameter 'numberOfRowsInPage' when calling getMerchants(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getMerchants(Async)");
        }

        return getMerchantsCall(numberOfRowsInPage, pageNumber, name, legalName, status, _callback);

    }

    /**
     * 
     * 
     * @param numberOfRowsInPage  (required)
     * @param pageNumber  (required)
     * @param name  (optional)
     * @param legalName  (optional)
     * @param status  (optional)
     * @return GetMerchantsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetMerchantsResponse getMerchants(Integer numberOfRowsInPage, Integer pageNumber, String name, String legalName, Integer status) throws ApiException {
        ApiResponse<GetMerchantsResponse> localVarResp = getMerchantsWithHttpInfo(numberOfRowsInPage, pageNumber, name, legalName, status);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param numberOfRowsInPage  (required)
     * @param pageNumber  (required)
     * @param name  (optional)
     * @param legalName  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;GetMerchantsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetMerchantsResponse> getMerchantsWithHttpInfo(Integer numberOfRowsInPage, Integer pageNumber, String name, String legalName, Integer status) throws ApiException {
        okhttp3.Call localVarCall = getMerchantsValidateBeforeCall(numberOfRowsInPage, pageNumber, name, legalName, status, null);
        Type localVarReturnType = new TypeToken<GetMerchantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param numberOfRowsInPage  (required)
     * @param pageNumber  (required)
     * @param name  (optional)
     * @param legalName  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsAsync(Integer numberOfRowsInPage, Integer pageNumber, String name, String legalName, Integer status, final ApiCallback<GetMerchantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantsValidateBeforeCall(numberOfRowsInPage, pageNumber, name, legalName, status, _callback);
        Type localVarReturnType = new TypeToken<GetMerchantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
