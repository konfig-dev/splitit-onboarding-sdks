/*
Splitit.OnBoarding.Api.V2

Splitit's Onboarding API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// GetMerchantResponse struct for GetMerchantResponse
type GetMerchantResponse struct {
	Name string `json:"name"`
	LegalName string `json:"legalName"`
	Phone string `json:"phone"`
	Country string `json:"country"`
	AnnualSales string `json:"annualSales"`
	Status string `json:"status"`
	MerchantTempId string `json:"merchantTempId"`
}

// NewGetMerchantResponse instantiates a new GetMerchantResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMerchantResponse(name string, legalName string, phone string, country string, annualSales string, status string, merchantTempId string) *GetMerchantResponse {
	this := GetMerchantResponse{}
	this.Name = name
	this.LegalName = legalName
	this.Phone = phone
	this.Country = country
	this.AnnualSales = annualSales
	this.Status = status
	this.MerchantTempId = merchantTempId
	return &this
}

// NewGetMerchantResponseWithDefaults instantiates a new GetMerchantResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMerchantResponseWithDefaults() *GetMerchantResponse {
	this := GetMerchantResponse{}
	return &this
}

// GetName returns the Name field value
func (o *GetMerchantResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GetMerchantResponse) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GetMerchantResponse) SetName(v string) {
	o.Name = v
}

// GetLegalName returns the LegalName field value
func (o *GetMerchantResponse) GetLegalName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LegalName
}

// GetLegalNameOk returns a tuple with the LegalName field value
// and a boolean to check if the value has been set.
func (o *GetMerchantResponse) GetLegalNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.LegalName, true
}

// SetLegalName sets field value
func (o *GetMerchantResponse) SetLegalName(v string) {
	o.LegalName = v
}

// GetPhone returns the Phone field value
func (o *GetMerchantResponse) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *GetMerchantResponse) GetPhoneOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *GetMerchantResponse) SetPhone(v string) {
	o.Phone = v
}

// GetCountry returns the Country field value
func (o *GetMerchantResponse) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *GetMerchantResponse) GetCountryOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *GetMerchantResponse) SetCountry(v string) {
	o.Country = v
}

// GetAnnualSales returns the AnnualSales field value
func (o *GetMerchantResponse) GetAnnualSales() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnnualSales
}

// GetAnnualSalesOk returns a tuple with the AnnualSales field value
// and a boolean to check if the value has been set.
func (o *GetMerchantResponse) GetAnnualSalesOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AnnualSales, true
}

// SetAnnualSales sets field value
func (o *GetMerchantResponse) SetAnnualSales(v string) {
	o.AnnualSales = v
}

// GetStatus returns the Status field value
func (o *GetMerchantResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GetMerchantResponse) GetStatusOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GetMerchantResponse) SetStatus(v string) {
	o.Status = v
}

// GetMerchantTempId returns the MerchantTempId field value
func (o *GetMerchantResponse) GetMerchantTempId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantTempId
}

// GetMerchantTempIdOk returns a tuple with the MerchantTempId field value
// and a boolean to check if the value has been set.
func (o *GetMerchantResponse) GetMerchantTempIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.MerchantTempId, true
}

// SetMerchantTempId sets field value
func (o *GetMerchantResponse) SetMerchantTempId(v string) {
	o.MerchantTempId = v
}

func (o GetMerchantResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["legalName"] = o.LegalName
	}
	if true {
		toSerialize["phone"] = o.Phone
	}
	if true {
		toSerialize["country"] = o.Country
	}
	if true {
		toSerialize["annualSales"] = o.AnnualSales
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["merchantTempId"] = o.MerchantTempId
	}
	return json.Marshal(toSerialize)
}

type NullableGetMerchantResponse struct {
	value *GetMerchantResponse
	isSet bool
}

func (v NullableGetMerchantResponse) Get() *GetMerchantResponse {
	return v.value
}

func (v *NullableGetMerchantResponse) Set(val *GetMerchantResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMerchantResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMerchantResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMerchantResponse(val *GetMerchantResponse) *NullableGetMerchantResponse {
	return &NullableGetMerchantResponse{value: val, isSet: true}
}

func (v NullableGetMerchantResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMerchantResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


