/*
Splitit.OnBoarding.Api.V2

Splitit's Onboarding API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// ProcessorResponse struct for ProcessorResponse
type ProcessorResponse struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	ProcessorAuthenticationParametersRequest []ProcessorAuthenticationParametersRequest `json:"processorAuthenticationParametersRequest"`
}

// NewProcessorResponse instantiates a new ProcessorResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessorResponse(id int64, name string, processorAuthenticationParametersRequest []ProcessorAuthenticationParametersRequest) *ProcessorResponse {
	this := ProcessorResponse{}
	this.Id = id
	this.Name = name
	this.ProcessorAuthenticationParametersRequest = processorAuthenticationParametersRequest
	return &this
}

// NewProcessorResponseWithDefaults instantiates a new ProcessorResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessorResponseWithDefaults() *ProcessorResponse {
	this := ProcessorResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ProcessorResponse) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProcessorResponse) GetIdOk() (*int64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProcessorResponse) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ProcessorResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProcessorResponse) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProcessorResponse) SetName(v string) {
	o.Name = v
}

// GetProcessorAuthenticationParametersRequest returns the ProcessorAuthenticationParametersRequest field value
func (o *ProcessorResponse) GetProcessorAuthenticationParametersRequest() []ProcessorAuthenticationParametersRequest {
	if o == nil {
		var ret []ProcessorAuthenticationParametersRequest
		return ret
	}

	return o.ProcessorAuthenticationParametersRequest
}

// GetProcessorAuthenticationParametersRequestOk returns a tuple with the ProcessorAuthenticationParametersRequest field value
// and a boolean to check if the value has been set.
func (o *ProcessorResponse) GetProcessorAuthenticationParametersRequestOk() ([]ProcessorAuthenticationParametersRequest, bool) {
	if o == nil {
    return nil, false
	}
	return o.ProcessorAuthenticationParametersRequest, true
}

// SetProcessorAuthenticationParametersRequest sets field value
func (o *ProcessorResponse) SetProcessorAuthenticationParametersRequest(v []ProcessorAuthenticationParametersRequest) {
	o.ProcessorAuthenticationParametersRequest = v
}

func (o ProcessorResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["processorAuthenticationParametersRequest"] = o.ProcessorAuthenticationParametersRequest
	}
	return json.Marshal(toSerialize)
}

type NullableProcessorResponse struct {
	value *ProcessorResponse
	isSet bool
}

func (v NullableProcessorResponse) Get() *ProcessorResponse {
	return v.value
}

func (v *NullableProcessorResponse) Set(val *ProcessorResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessorResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessorResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessorResponse(val *ProcessorResponse) *NullableProcessorResponse {
	return &NullableProcessorResponse{value: val, isSet: true}
}

func (v NullableProcessorResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessorResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


