/*
Splitit.OnBoarding.Api.V2

Splitit's Onboarding API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// CountryResponse struct for CountryResponse
type CountryResponse struct {
	Id string `json:"id"`
	Name string `json:"name"`
	IsoA2 string `json:"isoA2"`
	IsoA3 string `json:"isoA3"`
	IsoNumber string `json:"isoNumber"`
}

// NewCountryResponse instantiates a new CountryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryResponse(id string, name string, isoA2 string, isoA3 string, isoNumber string) *CountryResponse {
	this := CountryResponse{}
	this.Id = id
	this.Name = name
	this.IsoA2 = isoA2
	this.IsoA3 = isoA3
	this.IsoNumber = isoNumber
	return &this
}

// NewCountryResponseWithDefaults instantiates a new CountryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryResponseWithDefaults() *CountryResponse {
	this := CountryResponse{}
	return &this
}

// GetId returns the Id field value
func (o *CountryResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CountryResponse) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CountryResponse) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *CountryResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CountryResponse) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CountryResponse) SetName(v string) {
	o.Name = v
}

// GetIsoA2 returns the IsoA2 field value
func (o *CountryResponse) GetIsoA2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsoA2
}

// GetIsoA2Ok returns a tuple with the IsoA2 field value
// and a boolean to check if the value has been set.
func (o *CountryResponse) GetIsoA2Ok() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsoA2, true
}

// SetIsoA2 sets field value
func (o *CountryResponse) SetIsoA2(v string) {
	o.IsoA2 = v
}

// GetIsoA3 returns the IsoA3 field value
func (o *CountryResponse) GetIsoA3() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsoA3
}

// GetIsoA3Ok returns a tuple with the IsoA3 field value
// and a boolean to check if the value has been set.
func (o *CountryResponse) GetIsoA3Ok() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsoA3, true
}

// SetIsoA3 sets field value
func (o *CountryResponse) SetIsoA3(v string) {
	o.IsoA3 = v
}

// GetIsoNumber returns the IsoNumber field value
func (o *CountryResponse) GetIsoNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IsoNumber
}

// GetIsoNumberOk returns a tuple with the IsoNumber field value
// and a boolean to check if the value has been set.
func (o *CountryResponse) GetIsoNumberOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsoNumber, true
}

// SetIsoNumber sets field value
func (o *CountryResponse) SetIsoNumber(v string) {
	o.IsoNumber = v
}

func (o CountryResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["isoA2"] = o.IsoA2
	}
	if true {
		toSerialize["isoA3"] = o.IsoA3
	}
	if true {
		toSerialize["isoNumber"] = o.IsoNumber
	}
	return json.Marshal(toSerialize)
}

type NullableCountryResponse struct {
	value *CountryResponse
	isSet bool
}

func (v NullableCountryResponse) Get() *CountryResponse {
	return v.value
}

func (v *NullableCountryResponse) Set(val *CountryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryResponse(val *CountryResponse) *NullableCountryResponse {
	return &NullableCountryResponse{value: val, isSet: true}
}

func (v NullableCountryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


