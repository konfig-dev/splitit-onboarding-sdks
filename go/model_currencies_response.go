/*
Splitit.OnBoarding.Api.V2

Splitit's Onboarding API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// CurrenciesResponse struct for CurrenciesResponse
type CurrenciesResponse struct {
	Currencies []CurrencyResponse `json:"currencies"`
}

// NewCurrenciesResponse instantiates a new CurrenciesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrenciesResponse(currencies []CurrencyResponse) *CurrenciesResponse {
	this := CurrenciesResponse{}
	this.Currencies = currencies
	return &this
}

// NewCurrenciesResponseWithDefaults instantiates a new CurrenciesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrenciesResponseWithDefaults() *CurrenciesResponse {
	this := CurrenciesResponse{}
	return &this
}

// GetCurrencies returns the Currencies field value
func (o *CurrenciesResponse) GetCurrencies() []CurrencyResponse {
	if o == nil {
		var ret []CurrencyResponse
		return ret
	}

	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value
// and a boolean to check if the value has been set.
func (o *CurrenciesResponse) GetCurrenciesOk() ([]CurrencyResponse, bool) {
	if o == nil {
    return nil, false
	}
	return o.Currencies, true
}

// SetCurrencies sets field value
func (o *CurrenciesResponse) SetCurrencies(v []CurrencyResponse) {
	o.Currencies = v
}

func (o CurrenciesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["currencies"] = o.Currencies
	}
	return json.Marshal(toSerialize)
}

type NullableCurrenciesResponse struct {
	value *CurrenciesResponse
	isSet bool
}

func (v NullableCurrenciesResponse) Get() *CurrenciesResponse {
	return v.value
}

func (v *NullableCurrenciesResponse) Set(val *CurrenciesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrenciesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrenciesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrenciesResponse(val *CurrenciesResponse) *NullableCurrenciesResponse {
	return &NullableCurrenciesResponse{value: val, isSet: true}
}

func (v NullableCurrenciesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrenciesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


