/*
Splitit.OnBoarding.Api.V2

Splitit's Onboarding API

API version: 1.0.0
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package splitit

import (
	"encoding/json"
)

// CurrencyResponse struct for CurrencyResponse
type CurrencyResponse struct {
	Code *string `json:"code,omitempty"`
	Name *string `json:"name,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	IsoNumber *string `json:"isoNumber,omitempty"`
}

// NewCurrencyResponse instantiates a new CurrencyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyResponse() *CurrencyResponse {
	this := CurrencyResponse{}
	return &this
}

// NewCurrencyResponseWithDefaults instantiates a new CurrencyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyResponseWithDefaults() *CurrencyResponse {
	this := CurrencyResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CurrencyResponse) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CurrencyResponse) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CurrencyResponse) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CurrencyResponse) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CurrencyResponse) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CurrencyResponse) SetName(v string) {
	o.Name = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *CurrencyResponse) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *CurrencyResponse) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *CurrencyResponse) SetSymbol(v string) {
	o.Symbol = &v
}

// GetIsoNumber returns the IsoNumber field value if set, zero value otherwise.
func (o *CurrencyResponse) GetIsoNumber() string {
	if o == nil || isNil(o.IsoNumber) {
		var ret string
		return ret
	}
	return *o.IsoNumber
}

// GetIsoNumberOk returns a tuple with the IsoNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetIsoNumberOk() (*string, bool) {
	if o == nil || isNil(o.IsoNumber) {
    return nil, false
	}
	return o.IsoNumber, true
}

// HasIsoNumber returns a boolean if a field has been set.
func (o *CurrencyResponse) HasIsoNumber() bool {
	if o != nil && !isNil(o.IsoNumber) {
		return true
	}

	return false
}

// SetIsoNumber gets a reference to the given string and assigns it to the IsoNumber field.
func (o *CurrencyResponse) SetIsoNumber(v string) {
	o.IsoNumber = &v
}

func (o CurrencyResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.IsoNumber) {
		toSerialize["isoNumber"] = o.IsoNumber
	}
	return json.Marshal(toSerialize)
}

type NullableCurrencyResponse struct {
	value *CurrencyResponse
	isSet bool
}

func (v NullableCurrencyResponse) Get() *CurrencyResponse {
	return v.value
}

func (v *NullableCurrencyResponse) Set(val *CurrencyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyResponse(val *CurrencyResponse) *NullableCurrencyResponse {
	return &NullableCurrencyResponse{value: val, isSet: true}
}

func (v NullableCurrencyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


