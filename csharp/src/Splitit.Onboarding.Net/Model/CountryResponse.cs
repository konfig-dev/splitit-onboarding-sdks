/*
 * Splitit.OnBoarding.Api.V2
 *
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Onboarding.Net.Client.OpenAPIDateConverter;

namespace Splitit.Onboarding.Net.Model
{
    /// <summary>
    /// CountryResponse
    /// </summary>
    [DataContract(Name = "CountryResponse")]
    public partial class CountryResponse : IEquatable<CountryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountryResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CountryResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CountryResponse" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="isoA2">isoA2 (required).</param>
        /// <param name="isoA3">isoA3 (required).</param>
        /// <param name="isoNumber">isoNumber (required).</param>
        public CountryResponse(string id = default(string), string name = default(string), string isoA2 = default(string), string isoA3 = default(string), string isoNumber = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CountryResponse and cannot be null");
            }
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CountryResponse and cannot be null");
            }
            this.Name = name;
            // to ensure "isoA2" is required (not null)
            if (isoA2 == null)
            {
                throw new ArgumentNullException("isoA2 is a required property for CountryResponse and cannot be null");
            }
            this.IsoA2 = isoA2;
            // to ensure "isoA3" is required (not null)
            if (isoA3 == null)
            {
                throw new ArgumentNullException("isoA3 is a required property for CountryResponse and cannot be null");
            }
            this.IsoA3 = isoA3;
            // to ensure "isoNumber" is required (not null)
            if (isoNumber == null)
            {
                throw new ArgumentNullException("isoNumber is a required property for CountryResponse and cannot be null");
            }
            this.IsoNumber = isoNumber;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsoA2
        /// </summary>
        [DataMember(Name = "isoA2", IsRequired = true, EmitDefaultValue = true)]
        public string IsoA2 { get; set; }

        /// <summary>
        /// Gets or Sets IsoA3
        /// </summary>
        [DataMember(Name = "isoA3", IsRequired = true, EmitDefaultValue = true)]
        public string IsoA3 { get; set; }

        /// <summary>
        /// Gets or Sets IsoNumber
        /// </summary>
        [DataMember(Name = "isoNumber", IsRequired = true, EmitDefaultValue = true)]
        public string IsoNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CountryResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsoA2: ").Append(IsoA2).Append("\n");
            sb.Append("  IsoA3: ").Append(IsoA3).Append("\n");
            sb.Append("  IsoNumber: ").Append(IsoNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CountryResponse);
        }

        /// <summary>
        /// Returns true if CountryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CountryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CountryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsoA2 == input.IsoA2 ||
                    (this.IsoA2 != null &&
                    this.IsoA2.Equals(input.IsoA2))
                ) && 
                (
                    this.IsoA3 == input.IsoA3 ||
                    (this.IsoA3 != null &&
                    this.IsoA3.Equals(input.IsoA3))
                ) && 
                (
                    this.IsoNumber == input.IsoNumber ||
                    (this.IsoNumber != null &&
                    this.IsoNumber.Equals(input.IsoNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.IsoA2 != null)
                {
                    hashCode = (hashCode * 59) + this.IsoA2.GetHashCode();
                }
                if (this.IsoA3 != null)
                {
                    hashCode = (hashCode * 59) + this.IsoA3.GetHashCode();
                }
                if (this.IsoNumber != null)
                {
                    hashCode = (hashCode * 59) + this.IsoNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
