/*
 * Splitit.OnBoarding.Api.V2
 *
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Onboarding.Net.Client.OpenAPIDateConverter;

namespace Splitit.Onboarding.Net.Model
{
    /// <summary>
    /// CreateMerchantRequest
    /// </summary>
    [DataContract(Name = "CreateMerchantRequest")]
    public partial class CreateMerchantRequest : IEquatable<CreateMerchantRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMerchantRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateMerchantRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateMerchantRequest" /> class.
        /// </summary>
        /// <param name="publicName">publicName (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="phoneNumber">phoneNumber (required).</param>
        /// <param name="countryIso2">countryIso2 (required).</param>
        /// <param name="legalName">legalName (required).</param>
        /// <param name="currencyCode">currencyCode (required).</param>
        /// <param name="vertical">vertical (required).</param>
        /// <param name="tier">tier.</param>
        /// <param name="businessStreetAddress">businessStreetAddress.</param>
        /// <param name="businessCity">businessCity.</param>
        /// <param name="businessPostalCode">businessPostalCode.</param>
        /// <param name="businessCountry">businessCountry.</param>
        /// <param name="businessState">businessState.</param>
        /// <param name="subVertical">subVertical.</param>
        /// <param name="nameOnBankAccount">nameOnBankAccount.</param>
        /// <param name="incorporationCountry">incorporationCountry.</param>
        /// <param name="accountNumber">accountNumber.</param>
        /// <param name="routingNumber">routingNumber.</param>
        /// <param name="taxIdNumber">taxIdNumber.</param>
        /// <param name="totalAnnualSales">totalAnnualSales.</param>
        /// <param name="platformName">platformName.</param>
        public CreateMerchantRequest(string publicName = default(string), string email = default(string), string phoneNumber = default(string), string countryIso2 = default(string), string legalName = default(string), string currencyCode = default(string), string vertical = default(string), string tier = default(string), string businessStreetAddress = default(string), string businessCity = default(string), string businessPostalCode = default(string), string businessCountry = default(string), string businessState = default(string), string subVertical = default(string), string nameOnBankAccount = default(string), string incorporationCountry = default(string), string accountNumber = default(string), string routingNumber = default(string), string taxIdNumber = default(string), string totalAnnualSales = default(string), string platformName = default(string))
        {
            // to ensure "publicName" is required (not null)
            if (publicName == null)
            {
                throw new ArgumentNullException("publicName is a required property for CreateMerchantRequest and cannot be null");
            }
            this.PublicName = publicName;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CreateMerchantRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "phoneNumber" is required (not null)
            if (phoneNumber == null)
            {
                throw new ArgumentNullException("phoneNumber is a required property for CreateMerchantRequest and cannot be null");
            }
            this.PhoneNumber = phoneNumber;
            // to ensure "countryIso2" is required (not null)
            if (countryIso2 == null)
            {
                throw new ArgumentNullException("countryIso2 is a required property for CreateMerchantRequest and cannot be null");
            }
            this.CountryIso2 = countryIso2;
            // to ensure "legalName" is required (not null)
            if (legalName == null)
            {
                throw new ArgumentNullException("legalName is a required property for CreateMerchantRequest and cannot be null");
            }
            this.LegalName = legalName;
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new ArgumentNullException("currencyCode is a required property for CreateMerchantRequest and cannot be null");
            }
            this.CurrencyCode = currencyCode;
            // to ensure "vertical" is required (not null)
            if (vertical == null)
            {
                throw new ArgumentNullException("vertical is a required property for CreateMerchantRequest and cannot be null");
            }
            this.Vertical = vertical;
            this.Tier = tier;
            this.BusinessStreetAddress = businessStreetAddress;
            this.BusinessCity = businessCity;
            this.BusinessPostalCode = businessPostalCode;
            this.BusinessCountry = businessCountry;
            this.BusinessState = businessState;
            this.SubVertical = subVertical;
            this.NameOnBankAccount = nameOnBankAccount;
            this.IncorporationCountry = incorporationCountry;
            this.AccountNumber = accountNumber;
            this.RoutingNumber = routingNumber;
            this.TaxIdNumber = taxIdNumber;
            this.TotalAnnualSales = totalAnnualSales;
            this.PlatformName = platformName;
        }

        /// <summary>
        /// Gets or Sets PublicName
        /// </summary>
        [DataMember(Name = "publicName", IsRequired = true, EmitDefaultValue = true)]
        public string PublicName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", IsRequired = true, EmitDefaultValue = true)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets CountryIso2
        /// </summary>
        [DataMember(Name = "countryIso2", IsRequired = true, EmitDefaultValue = true)]
        public string CountryIso2 { get; set; }

        /// <summary>
        /// Gets or Sets LegalName
        /// </summary>
        [DataMember(Name = "legalName", IsRequired = true, EmitDefaultValue = true)]
        public string LegalName { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name = "currencyCode", IsRequired = true, EmitDefaultValue = true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets Vertical
        /// </summary>
        [DataMember(Name = "vertical", IsRequired = true, EmitDefaultValue = true)]
        public string Vertical { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [DataMember(Name = "tier", EmitDefaultValue = false)]
        public string Tier { get; set; }

        /// <summary>
        /// Gets or Sets BusinessStreetAddress
        /// </summary>
        [DataMember(Name = "businessStreetAddress", EmitDefaultValue = false)]
        public string BusinessStreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets BusinessCity
        /// </summary>
        [DataMember(Name = "businessCity", EmitDefaultValue = false)]
        public string BusinessCity { get; set; }

        /// <summary>
        /// Gets or Sets BusinessPostalCode
        /// </summary>
        [DataMember(Name = "businessPostalCode", EmitDefaultValue = false)]
        public string BusinessPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets BusinessCountry
        /// </summary>
        [DataMember(Name = "businessCountry", EmitDefaultValue = false)]
        public string BusinessCountry { get; set; }

        /// <summary>
        /// Gets or Sets BusinessState
        /// </summary>
        [DataMember(Name = "businessState", EmitDefaultValue = false)]
        public string BusinessState { get; set; }

        /// <summary>
        /// Gets or Sets SubVertical
        /// </summary>
        [DataMember(Name = "subVertical", EmitDefaultValue = false)]
        public string SubVertical { get; set; }

        /// <summary>
        /// Gets or Sets NameOnBankAccount
        /// </summary>
        [DataMember(Name = "nameOnBankAccount", EmitDefaultValue = false)]
        public string NameOnBankAccount { get; set; }

        /// <summary>
        /// Gets or Sets IncorporationCountry
        /// </summary>
        [DataMember(Name = "incorporationCountry", EmitDefaultValue = false)]
        public string IncorporationCountry { get; set; }

        /// <summary>
        /// Gets or Sets AccountNumber
        /// </summary>
        [DataMember(Name = "accountNumber", EmitDefaultValue = false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets RoutingNumber
        /// </summary>
        [DataMember(Name = "routingNumber", EmitDefaultValue = false)]
        public string RoutingNumber { get; set; }

        /// <summary>
        /// Gets or Sets TaxIdNumber
        /// </summary>
        [DataMember(Name = "taxIdNumber", EmitDefaultValue = false)]
        public string TaxIdNumber { get; set; }

        /// <summary>
        /// Gets or Sets TotalAnnualSales
        /// </summary>
        [DataMember(Name = "totalAnnualSales", EmitDefaultValue = false)]
        public string TotalAnnualSales { get; set; }

        /// <summary>
        /// Gets or Sets PlatformName
        /// </summary>
        [DataMember(Name = "platformName", EmitDefaultValue = false)]
        public string PlatformName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateMerchantRequest {\n");
            sb.Append("  PublicName: ").Append(PublicName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  CountryIso2: ").Append(CountryIso2).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Vertical: ").Append(Vertical).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  BusinessStreetAddress: ").Append(BusinessStreetAddress).Append("\n");
            sb.Append("  BusinessCity: ").Append(BusinessCity).Append("\n");
            sb.Append("  BusinessPostalCode: ").Append(BusinessPostalCode).Append("\n");
            sb.Append("  BusinessCountry: ").Append(BusinessCountry).Append("\n");
            sb.Append("  BusinessState: ").Append(BusinessState).Append("\n");
            sb.Append("  SubVertical: ").Append(SubVertical).Append("\n");
            sb.Append("  NameOnBankAccount: ").Append(NameOnBankAccount).Append("\n");
            sb.Append("  IncorporationCountry: ").Append(IncorporationCountry).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  RoutingNumber: ").Append(RoutingNumber).Append("\n");
            sb.Append("  TaxIdNumber: ").Append(TaxIdNumber).Append("\n");
            sb.Append("  TotalAnnualSales: ").Append(TotalAnnualSales).Append("\n");
            sb.Append("  PlatformName: ").Append(PlatformName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateMerchantRequest);
        }

        /// <summary>
        /// Returns true if CreateMerchantRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateMerchantRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateMerchantRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PublicName == input.PublicName ||
                    (this.PublicName != null &&
                    this.PublicName.Equals(input.PublicName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.PhoneNumber == input.PhoneNumber ||
                    (this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(input.PhoneNumber))
                ) && 
                (
                    this.CountryIso2 == input.CountryIso2 ||
                    (this.CountryIso2 != null &&
                    this.CountryIso2.Equals(input.CountryIso2))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Vertical == input.Vertical ||
                    (this.Vertical != null &&
                    this.Vertical.Equals(input.Vertical))
                ) && 
                (
                    this.Tier == input.Tier ||
                    (this.Tier != null &&
                    this.Tier.Equals(input.Tier))
                ) && 
                (
                    this.BusinessStreetAddress == input.BusinessStreetAddress ||
                    (this.BusinessStreetAddress != null &&
                    this.BusinessStreetAddress.Equals(input.BusinessStreetAddress))
                ) && 
                (
                    this.BusinessCity == input.BusinessCity ||
                    (this.BusinessCity != null &&
                    this.BusinessCity.Equals(input.BusinessCity))
                ) && 
                (
                    this.BusinessPostalCode == input.BusinessPostalCode ||
                    (this.BusinessPostalCode != null &&
                    this.BusinessPostalCode.Equals(input.BusinessPostalCode))
                ) && 
                (
                    this.BusinessCountry == input.BusinessCountry ||
                    (this.BusinessCountry != null &&
                    this.BusinessCountry.Equals(input.BusinessCountry))
                ) && 
                (
                    this.BusinessState == input.BusinessState ||
                    (this.BusinessState != null &&
                    this.BusinessState.Equals(input.BusinessState))
                ) && 
                (
                    this.SubVertical == input.SubVertical ||
                    (this.SubVertical != null &&
                    this.SubVertical.Equals(input.SubVertical))
                ) && 
                (
                    this.NameOnBankAccount == input.NameOnBankAccount ||
                    (this.NameOnBankAccount != null &&
                    this.NameOnBankAccount.Equals(input.NameOnBankAccount))
                ) && 
                (
                    this.IncorporationCountry == input.IncorporationCountry ||
                    (this.IncorporationCountry != null &&
                    this.IncorporationCountry.Equals(input.IncorporationCountry))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.RoutingNumber == input.RoutingNumber ||
                    (this.RoutingNumber != null &&
                    this.RoutingNumber.Equals(input.RoutingNumber))
                ) && 
                (
                    this.TaxIdNumber == input.TaxIdNumber ||
                    (this.TaxIdNumber != null &&
                    this.TaxIdNumber.Equals(input.TaxIdNumber))
                ) && 
                (
                    this.TotalAnnualSales == input.TotalAnnualSales ||
                    (this.TotalAnnualSales != null &&
                    this.TotalAnnualSales.Equals(input.TotalAnnualSales))
                ) && 
                (
                    this.PlatformName == input.PlatformName ||
                    (this.PlatformName != null &&
                    this.PlatformName.Equals(input.PlatformName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublicName != null)
                {
                    hashCode = (hashCode * 59) + this.PublicName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.PhoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PhoneNumber.GetHashCode();
                }
                if (this.CountryIso2 != null)
                {
                    hashCode = (hashCode * 59) + this.CountryIso2.GetHashCode();
                }
                if (this.LegalName != null)
                {
                    hashCode = (hashCode * 59) + this.LegalName.GetHashCode();
                }
                if (this.CurrencyCode != null)
                {
                    hashCode = (hashCode * 59) + this.CurrencyCode.GetHashCode();
                }
                if (this.Vertical != null)
                {
                    hashCode = (hashCode * 59) + this.Vertical.GetHashCode();
                }
                if (this.Tier != null)
                {
                    hashCode = (hashCode * 59) + this.Tier.GetHashCode();
                }
                if (this.BusinessStreetAddress != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessStreetAddress.GetHashCode();
                }
                if (this.BusinessCity != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessCity.GetHashCode();
                }
                if (this.BusinessPostalCode != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessPostalCode.GetHashCode();
                }
                if (this.BusinessCountry != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessCountry.GetHashCode();
                }
                if (this.BusinessState != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessState.GetHashCode();
                }
                if (this.SubVertical != null)
                {
                    hashCode = (hashCode * 59) + this.SubVertical.GetHashCode();
                }
                if (this.NameOnBankAccount != null)
                {
                    hashCode = (hashCode * 59) + this.NameOnBankAccount.GetHashCode();
                }
                if (this.IncorporationCountry != null)
                {
                    hashCode = (hashCode * 59) + this.IncorporationCountry.GetHashCode();
                }
                if (this.AccountNumber != null)
                {
                    hashCode = (hashCode * 59) + this.AccountNumber.GetHashCode();
                }
                if (this.RoutingNumber != null)
                {
                    hashCode = (hashCode * 59) + this.RoutingNumber.GetHashCode();
                }
                if (this.TaxIdNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TaxIdNumber.GetHashCode();
                }
                if (this.TotalAnnualSales != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAnnualSales.GetHashCode();
                }
                if (this.PlatformName != null)
                {
                    hashCode = (hashCode * 59) + this.PlatformName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // PublicName (string) minLength
            if (this.PublicName != null && this.PublicName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PublicName, length must be greater than 1.", new [] { "PublicName" });
            }

            // Email (string) minLength
            if (this.Email != null && this.Email.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be greater than 1.", new [] { "Email" });
            }

            // PhoneNumber (string) minLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be greater than 1.", new [] { "PhoneNumber" });
            }

            // CountryIso2 (string) minLength
            if (this.CountryIso2 != null && this.CountryIso2.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryIso2, length must be greater than 1.", new [] { "CountryIso2" });
            }

            // LegalName (string) minLength
            if (this.LegalName != null && this.LegalName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LegalName, length must be greater than 1.", new [] { "LegalName" });
            }

            // CurrencyCode (string) minLength
            if (this.CurrencyCode != null && this.CurrencyCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CurrencyCode, length must be greater than 1.", new [] { "CurrencyCode" });
            }

            // Vertical (string) minLength
            if (this.Vertical != null && this.Vertical.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Vertical, length must be greater than 1.", new [] { "Vertical" });
            }

            yield break;
        }
    }

}
