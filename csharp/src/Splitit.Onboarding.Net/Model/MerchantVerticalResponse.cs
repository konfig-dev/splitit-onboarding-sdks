/*
 * Splitit.OnBoarding.Api.V2
 *
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Onboarding.Net.Client.OpenAPIDateConverter;

namespace Splitit.Onboarding.Net.Model
{
    /// <summary>
    /// MerchantVerticalResponse
    /// </summary>
    [DataContract(Name = "MerchantVerticalResponse")]
    public partial class MerchantVerticalResponse : IEquatable<MerchantVerticalResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantVerticalResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MerchantVerticalResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantVerticalResponse" /> class.
        /// </summary>
        /// <param name="verticalDisplayName">verticalDisplayName (required).</param>
        /// <param name="verticalSplititName">verticalSplititName (required).</param>
        /// <param name="subCategories">subCategories (required).</param>
        public MerchantVerticalResponse(string verticalDisplayName = default(string), string verticalSplititName = default(string), List<string> subCategories = default(List<string>))
        {
            // to ensure "verticalDisplayName" is required (not null)
            if (verticalDisplayName == null)
            {
                throw new ArgumentNullException("verticalDisplayName is a required property for MerchantVerticalResponse and cannot be null");
            }
            this.VerticalDisplayName = verticalDisplayName;
            // to ensure "verticalSplititName" is required (not null)
            if (verticalSplititName == null)
            {
                throw new ArgumentNullException("verticalSplititName is a required property for MerchantVerticalResponse and cannot be null");
            }
            this.VerticalSplititName = verticalSplititName;
            // to ensure "subCategories" is required (not null)
            if (subCategories == null)
            {
                throw new ArgumentNullException("subCategories is a required property for MerchantVerticalResponse and cannot be null");
            }
            this.SubCategories = subCategories;
        }

        /// <summary>
        /// Gets or Sets VerticalDisplayName
        /// </summary>
        [DataMember(Name = "verticalDisplayName", IsRequired = true, EmitDefaultValue = true)]
        public string VerticalDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets VerticalSplititName
        /// </summary>
        [DataMember(Name = "verticalSplititName", IsRequired = true, EmitDefaultValue = true)]
        public string VerticalSplititName { get; set; }

        /// <summary>
        /// Gets or Sets SubCategories
        /// </summary>
        [DataMember(Name = "subCategories", IsRequired = true, EmitDefaultValue = true)]
        public List<string> SubCategories { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MerchantVerticalResponse {\n");
            sb.Append("  VerticalDisplayName: ").Append(VerticalDisplayName).Append("\n");
            sb.Append("  VerticalSplititName: ").Append(VerticalSplititName).Append("\n");
            sb.Append("  SubCategories: ").Append(SubCategories).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerchantVerticalResponse);
        }

        /// <summary>
        /// Returns true if MerchantVerticalResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MerchantVerticalResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerchantVerticalResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VerticalDisplayName == input.VerticalDisplayName ||
                    (this.VerticalDisplayName != null &&
                    this.VerticalDisplayName.Equals(input.VerticalDisplayName))
                ) && 
                (
                    this.VerticalSplititName == input.VerticalSplititName ||
                    (this.VerticalSplititName != null &&
                    this.VerticalSplititName.Equals(input.VerticalSplititName))
                ) && 
                (
                    this.SubCategories == input.SubCategories ||
                    this.SubCategories != null &&
                    input.SubCategories != null &&
                    this.SubCategories.SequenceEqual(input.SubCategories)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VerticalDisplayName != null)
                {
                    hashCode = (hashCode * 59) + this.VerticalDisplayName.GetHashCode();
                }
                if (this.VerticalSplititName != null)
                {
                    hashCode = (hashCode * 59) + this.VerticalSplititName.GetHashCode();
                }
                if (this.SubCategories != null)
                {
                    hashCode = (hashCode * 59) + this.SubCategories.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
