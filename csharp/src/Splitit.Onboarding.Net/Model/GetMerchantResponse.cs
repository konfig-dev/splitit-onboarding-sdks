/*
 * Splitit.OnBoarding.Api.V2
 *
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Onboarding.Net.Client.OpenAPIDateConverter;

namespace Splitit.Onboarding.Net.Model
{
    /// <summary>
    /// GetMerchantResponse
    /// </summary>
    [DataContract(Name = "GetMerchantResponse")]
    public partial class GetMerchantResponse : IEquatable<GetMerchantResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMerchantResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetMerchantResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetMerchantResponse" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="legalName">legalName (required).</param>
        /// <param name="phone">phone (required).</param>
        /// <param name="country">country (required).</param>
        /// <param name="annualSales">annualSales (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="merchantTempId">merchantTempId (required).</param>
        public GetMerchantResponse(string name = default(string), string legalName = default(string), string phone = default(string), string country = default(string), string annualSales = default(string), string status = default(string), string merchantTempId = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GetMerchantResponse and cannot be null");
            }
            this.Name = name;
            // to ensure "legalName" is required (not null)
            if (legalName == null)
            {
                throw new ArgumentNullException("legalName is a required property for GetMerchantResponse and cannot be null");
            }
            this.LegalName = legalName;
            // to ensure "phone" is required (not null)
            if (phone == null)
            {
                throw new ArgumentNullException("phone is a required property for GetMerchantResponse and cannot be null");
            }
            this.Phone = phone;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for GetMerchantResponse and cannot be null");
            }
            this.Country = country;
            // to ensure "annualSales" is required (not null)
            if (annualSales == null)
            {
                throw new ArgumentNullException("annualSales is a required property for GetMerchantResponse and cannot be null");
            }
            this.AnnualSales = annualSales;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for GetMerchantResponse and cannot be null");
            }
            this.Status = status;
            // to ensure "merchantTempId" is required (not null)
            if (merchantTempId == null)
            {
                throw new ArgumentNullException("merchantTempId is a required property for GetMerchantResponse and cannot be null");
            }
            this.MerchantTempId = merchantTempId;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets LegalName
        /// </summary>
        [DataMember(Name = "legalName", IsRequired = true, EmitDefaultValue = true)]
        public string LegalName { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name = "phone", IsRequired = true, EmitDefaultValue = true)]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets AnnualSales
        /// </summary>
        [DataMember(Name = "annualSales", IsRequired = true, EmitDefaultValue = true)]
        public string AnnualSales { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets MerchantTempId
        /// </summary>
        [DataMember(Name = "merchantTempId", IsRequired = true, EmitDefaultValue = true)]
        public string MerchantTempId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetMerchantResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  AnnualSales: ").Append(AnnualSales).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  MerchantTempId: ").Append(MerchantTempId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetMerchantResponse);
        }

        /// <summary>
        /// Returns true if GetMerchantResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetMerchantResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetMerchantResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.AnnualSales == input.AnnualSales ||
                    (this.AnnualSales != null &&
                    this.AnnualSales.Equals(input.AnnualSales))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.MerchantTempId == input.MerchantTempId ||
                    (this.MerchantTempId != null &&
                    this.MerchantTempId.Equals(input.MerchantTempId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.LegalName != null)
                {
                    hashCode = (hashCode * 59) + this.LegalName.GetHashCode();
                }
                if (this.Phone != null)
                {
                    hashCode = (hashCode * 59) + this.Phone.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.AnnualSales != null)
                {
                    hashCode = (hashCode * 59) + this.AnnualSales.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.MerchantTempId != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantTempId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
