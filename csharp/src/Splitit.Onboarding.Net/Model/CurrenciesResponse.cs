/*
 * Splitit.OnBoarding.Api.V2
 *
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Onboarding.Net.Client.OpenAPIDateConverter;

namespace Splitit.Onboarding.Net.Model
{
    /// <summary>
    /// CurrenciesResponse
    /// </summary>
    [DataContract(Name = "CurrenciesResponse")]
    public partial class CurrenciesResponse : IEquatable<CurrenciesResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrenciesResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrenciesResponse" /> class.
        /// </summary>
        /// <param name="currencies">currencies (required).</param>
        public CurrenciesResponse(List<CurrencyResponse> currencies = default(List<CurrencyResponse>))
        {
            // to ensure "currencies" is required (not null)
            if (currencies == null)
            {
                throw new ArgumentNullException("currencies is a required property for CurrenciesResponse and cannot be null");
            }
            this.Currencies = currencies;
        }

        /// <summary>
        /// Gets or Sets Currencies
        /// </summary>
        [DataMember(Name = "currencies", IsRequired = true, EmitDefaultValue = true)]
        public List<CurrencyResponse> Currencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrenciesResponse {\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrenciesResponse);
        }

        /// <summary>
        /// Returns true if CurrenciesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrenciesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrenciesResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Currencies == input.Currencies ||
                    this.Currencies != null &&
                    input.Currencies != null &&
                    this.Currencies.SequenceEqual(input.Currencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Currencies != null)
                {
                    hashCode = (hashCode * 59) + this.Currencies.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
