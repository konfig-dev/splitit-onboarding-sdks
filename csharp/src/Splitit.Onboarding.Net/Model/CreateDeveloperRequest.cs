/*
 * Splitit.OnBoarding.Api.V2
 *
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Splitit.Onboarding.Net.Client.OpenAPIDateConverter;

namespace Splitit.Onboarding.Net.Model
{
    /// <summary>
    /// CreateDeveloperRequest
    /// </summary>
    [DataContract(Name = "CreateDeveloperRequest")]
    public partial class CreateDeveloperRequest : IEquatable<CreateDeveloperRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDeveloperRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateDeveloperRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDeveloperRequest" /> class.
        /// </summary>
        /// <param name="fullName">fullName (required).</param>
        /// <param name="email">email (required).</param>
        /// <param name="companyName">companyName (required).</param>
        /// <param name="termsAndConditions">termsAndConditions (required).</param>
        /// <param name="countryCode">countryCode (required).</param>
        /// <param name="fullCountryName">fullCountryName (required).</param>
        /// <param name="requestHeader">requestHeader (required).</param>
        public CreateDeveloperRequest(string fullName = default(string), string email = default(string), string companyName = default(string), bool termsAndConditions = default(bool), string countryCode = default(string), string fullCountryName = default(string), RequestHeaderSlim requestHeader = default(RequestHeaderSlim))
        {
            // to ensure "fullName" is required (not null)
            if (fullName == null)
            {
                throw new ArgumentNullException("fullName is a required property for CreateDeveloperRequest and cannot be null");
            }
            this.FullName = fullName;
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new ArgumentNullException("email is a required property for CreateDeveloperRequest and cannot be null");
            }
            this.Email = email;
            // to ensure "companyName" is required (not null)
            if (companyName == null)
            {
                throw new ArgumentNullException("companyName is a required property for CreateDeveloperRequest and cannot be null");
            }
            this.CompanyName = companyName;
            this.TermsAndConditions = termsAndConditions;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for CreateDeveloperRequest and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "fullCountryName" is required (not null)
            if (fullCountryName == null)
            {
                throw new ArgumentNullException("fullCountryName is a required property for CreateDeveloperRequest and cannot be null");
            }
            this.FullCountryName = fullCountryName;
            // to ensure "requestHeader" is required (not null)
            if (requestHeader == null)
            {
                throw new ArgumentNullException("requestHeader is a required property for CreateDeveloperRequest and cannot be null");
            }
            this.RequestHeader = requestHeader;
        }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name = "fullName", IsRequired = true, EmitDefaultValue = true)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", IsRequired = true, EmitDefaultValue = true)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [DataMember(Name = "companyName", IsRequired = true, EmitDefaultValue = true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or Sets TermsAndConditions
        /// </summary>
        [DataMember(Name = "termsAndConditions", IsRequired = true, EmitDefaultValue = true)]
        public bool TermsAndConditions { get; set; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Gets or Sets FullCountryName
        /// </summary>
        [DataMember(Name = "fullCountryName", IsRequired = true, EmitDefaultValue = true)]
        public string FullCountryName { get; set; }

        /// <summary>
        /// Gets or Sets RequestHeader
        /// </summary>
        [DataMember(Name = "requestHeader", IsRequired = true, EmitDefaultValue = true)]
        public RequestHeaderSlim RequestHeader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDeveloperRequest {\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  FullCountryName: ").Append(FullCountryName).Append("\n");
            sb.Append("  RequestHeader: ").Append(RequestHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateDeveloperRequest);
        }

        /// <summary>
        /// Returns true if CreateDeveloperRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateDeveloperRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateDeveloperRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    this.TermsAndConditions.Equals(input.TermsAndConditions)
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    this.FullCountryName == input.FullCountryName ||
                    (this.FullCountryName != null &&
                    this.FullCountryName.Equals(input.FullCountryName))
                ) && 
                (
                    this.RequestHeader == input.RequestHeader ||
                    (this.RequestHeader != null &&
                    this.RequestHeader.Equals(input.RequestHeader))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TermsAndConditions.GetHashCode();
                if (this.CountryCode != null)
                {
                    hashCode = (hashCode * 59) + this.CountryCode.GetHashCode();
                }
                if (this.FullCountryName != null)
                {
                    hashCode = (hashCode * 59) + this.FullCountryName.GetHashCode();
                }
                if (this.RequestHeader != null)
                {
                    hashCode = (hashCode * 59) + this.RequestHeader.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
