/*
 * Splitit.OnBoarding.Api.V2
 *
 * Splitit's Onboarding API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Splitit.Onboarding.Net.Client;
using Splitit.Onboarding.Net.Client.Auth;
using Splitit.Onboarding.Net.Model;

namespace Splitit.Onboarding.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMerchantsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMerchantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMerchantResponse</returns>
        CreateMerchantResponse CreateMerchant(CreateMerchantRequest createMerchantRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMerchantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMerchantResponse</returns>
        ApiResponse<CreateMerchantResponse> CreateMerchantWithHttpInfo(CreateMerchantRequest createMerchantRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantTempId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMerchantDetailsResponse</returns>
        GetMerchantDetailsResponse GetMerchantDetails(string merchantTempId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantTempId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMerchantDetailsResponse</returns>
        ApiResponse<GetMerchantDetailsResponse> GetMerchantDetailsWithHttpInfo(string merchantTempId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberOfRowsInPage"></param>
        /// <param name="pageNumber"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="legalName"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMerchantsResponse</returns>
        GetMerchantsResponse GetMerchants(int numberOfRowsInPage, int pageNumber, string name = default(string), string legalName = default(string), int? status = default(int?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberOfRowsInPage"></param>
        /// <param name="pageNumber"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="legalName"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMerchantsResponse</returns>
        ApiResponse<GetMerchantsResponse> GetMerchantsWithHttpInfo(int numberOfRowsInPage, int pageNumber, string name = default(string), string legalName = default(string), int? status = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMerchantsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMerchantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMerchantResponse</returns>
        System.Threading.Tasks.Task<CreateMerchantResponse> CreateMerchantAsync(CreateMerchantRequest createMerchantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMerchantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMerchantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateMerchantResponse>> CreateMerchantWithHttpInfoAsync(CreateMerchantRequest createMerchantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantTempId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMerchantDetailsResponse</returns>
        System.Threading.Tasks.Task<GetMerchantDetailsResponse> GetMerchantDetailsAsync(string merchantTempId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantTempId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMerchantDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMerchantDetailsResponse>> GetMerchantDetailsWithHttpInfoAsync(string merchantTempId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberOfRowsInPage"></param>
        /// <param name="pageNumber"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="legalName"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMerchantsResponse</returns>
        System.Threading.Tasks.Task<GetMerchantsResponse> GetMerchantsAsync(int numberOfRowsInPage, int pageNumber, string name = default(string), string legalName = default(string), int? status = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberOfRowsInPage"></param>
        /// <param name="pageNumber"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="legalName"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMerchantsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMerchantsResponse>> GetMerchantsWithHttpInfoAsync(int numberOfRowsInPage, int pageNumber, string name = default(string), string legalName = default(string), int? status = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMerchantsApi : IMerchantsApiSync, IMerchantsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MerchantsApi : IMerchantsApi
    {
        private Splitit.Onboarding.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MerchantsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MerchantsApi(string basePath)
        {
            this.Configuration = Splitit.Onboarding.Net.Client.Configuration.MergeConfigurations(
                Splitit.Onboarding.Net.Client.GlobalConfiguration.Instance,
                new Splitit.Onboarding.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Splitit.Onboarding.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Splitit.Onboarding.Net.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Splitit.Onboarding.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MerchantsApi(Splitit.Onboarding.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Splitit.Onboarding.Net.Client.Configuration.MergeConfigurations(
                Splitit.Onboarding.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Splitit.Onboarding.Net.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Splitit.Onboarding.Net.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Splitit.Onboarding.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MerchantsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MerchantsApi(Splitit.Onboarding.Net.Client.ISynchronousClient client, Splitit.Onboarding.Net.Client.IAsynchronousClient asyncClient, Splitit.Onboarding.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Splitit.Onboarding.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Splitit.Onboarding.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Splitit.Onboarding.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Splitit.Onboarding.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Splitit.Onboarding.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMerchantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateMerchantResponse</returns>
        public CreateMerchantResponse CreateMerchant(CreateMerchantRequest createMerchantRequest, int operationIndex = 0)
        {
            Splitit.Onboarding.Net.Client.ApiResponse<CreateMerchantResponse> localVarResponse = CreateMerchantWithHttpInfo(createMerchantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMerchantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateMerchantResponse</returns>
        public Splitit.Onboarding.Net.Client.ApiResponse<CreateMerchantResponse> CreateMerchantWithHttpInfo(CreateMerchantRequest createMerchantRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createMerchantRequest' is set
            if (createMerchantRequest == null)
            {
                throw new Splitit.Onboarding.Net.Client.ApiException(400, "Missing required parameter 'createMerchantRequest' when calling MerchantsApi->CreateMerchant");
            }

            Splitit.Onboarding.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Onboarding.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMerchantRequest;

            localVarRequestOptions.Operation = "MerchantsApi.CreateMerchant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateMerchantResponse>("/api/merchants/create", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMerchant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMerchantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateMerchantResponse</returns>
        public async System.Threading.Tasks.Task<CreateMerchantResponse> CreateMerchantAsync(CreateMerchantRequest createMerchantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Onboarding.Net.Client.ApiResponse<CreateMerchantResponse> localVarResponse = await CreateMerchantWithHttpInfoAsync(createMerchantRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createMerchantRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateMerchantResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Onboarding.Net.Client.ApiResponse<CreateMerchantResponse>> CreateMerchantWithHttpInfoAsync(CreateMerchantRequest createMerchantRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createMerchantRequest' is set
            if (createMerchantRequest == null)
            {
                throw new Splitit.Onboarding.Net.Client.ApiException(400, "Missing required parameter 'createMerchantRequest' when calling MerchantsApi->CreateMerchant");
            }


            Splitit.Onboarding.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Onboarding.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createMerchantRequest;

            localVarRequestOptions.Operation = "MerchantsApi.CreateMerchant";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateMerchantResponse>("/api/merchants/create", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateMerchant", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantTempId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMerchantDetailsResponse</returns>
        public GetMerchantDetailsResponse GetMerchantDetails(string merchantTempId, int operationIndex = 0)
        {
            Splitit.Onboarding.Net.Client.ApiResponse<GetMerchantDetailsResponse> localVarResponse = GetMerchantDetailsWithHttpInfo(merchantTempId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantTempId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMerchantDetailsResponse</returns>
        public Splitit.Onboarding.Net.Client.ApiResponse<GetMerchantDetailsResponse> GetMerchantDetailsWithHttpInfo(string merchantTempId, int operationIndex = 0)
        {
            // verify the required parameter 'merchantTempId' is set
            if (merchantTempId == null)
            {
                throw new Splitit.Onboarding.Net.Client.ApiException(400, "Missing required parameter 'merchantTempId' when calling MerchantsApi->GetMerchantDetails");
            }

            Splitit.Onboarding.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Onboarding.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "merchantTempId", merchantTempId));

            localVarRequestOptions.Operation = "MerchantsApi.GetMerchantDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMerchantDetailsResponse>("/api/merchants/get-details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMerchantDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantTempId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMerchantDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GetMerchantDetailsResponse> GetMerchantDetailsAsync(string merchantTempId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Onboarding.Net.Client.ApiResponse<GetMerchantDetailsResponse> localVarResponse = await GetMerchantDetailsWithHttpInfoAsync(merchantTempId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="merchantTempId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMerchantDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Onboarding.Net.Client.ApiResponse<GetMerchantDetailsResponse>> GetMerchantDetailsWithHttpInfoAsync(string merchantTempId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'merchantTempId' is set
            if (merchantTempId == null)
            {
                throw new Splitit.Onboarding.Net.Client.ApiException(400, "Missing required parameter 'merchantTempId' when calling MerchantsApi->GetMerchantDetails");
            }


            Splitit.Onboarding.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Onboarding.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "merchantTempId", merchantTempId));

            localVarRequestOptions.Operation = "MerchantsApi.GetMerchantDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMerchantDetailsResponse>("/api/merchants/get-details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMerchantDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberOfRowsInPage"></param>
        /// <param name="pageNumber"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="legalName"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMerchantsResponse</returns>
        public GetMerchantsResponse GetMerchants(int numberOfRowsInPage, int pageNumber, string name = default(string), string legalName = default(string), int? status = default(int?), int operationIndex = 0)
        {
            Splitit.Onboarding.Net.Client.ApiResponse<GetMerchantsResponse> localVarResponse = GetMerchantsWithHttpInfo(numberOfRowsInPage, pageNumber, name, legalName, status);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberOfRowsInPage"></param>
        /// <param name="pageNumber"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="legalName"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMerchantsResponse</returns>
        public Splitit.Onboarding.Net.Client.ApiResponse<GetMerchantsResponse> GetMerchantsWithHttpInfo(int numberOfRowsInPage, int pageNumber, string name = default(string), string legalName = default(string), int? status = default(int?), int operationIndex = 0)
        {
            Splitit.Onboarding.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Onboarding.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "NumberOfRowsInPage", numberOfRowsInPage));
            localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (legalName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "LegalName", legalName));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }

            localVarRequestOptions.Operation = "MerchantsApi.GetMerchants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMerchantsResponse>("/api/merchants/get", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMerchants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberOfRowsInPage"></param>
        /// <param name="pageNumber"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="legalName"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMerchantsResponse</returns>
        public async System.Threading.Tasks.Task<GetMerchantsResponse> GetMerchantsAsync(int numberOfRowsInPage, int pageNumber, string name = default(string), string legalName = default(string), int? status = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Splitit.Onboarding.Net.Client.ApiResponse<GetMerchantsResponse> localVarResponse = await GetMerchantsWithHttpInfoAsync(numberOfRowsInPage, pageNumber, name, legalName, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.Onboarding.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numberOfRowsInPage"></param>
        /// <param name="pageNumber"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="legalName"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMerchantsResponse)</returns>
        public async System.Threading.Tasks.Task<Splitit.Onboarding.Net.Client.ApiResponse<GetMerchantsResponse>> GetMerchantsWithHttpInfoAsync(int numberOfRowsInPage, int pageNumber, string name = default(string), string legalName = default(string), int? status = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Splitit.Onboarding.Net.Client.RequestOptions localVarRequestOptions = new Splitit.Onboarding.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Splitit.Onboarding.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "NumberOfRowsInPage", numberOfRowsInPage));
            localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "PageNumber", pageNumber));
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "Name", name));
            }
            if (legalName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "LegalName", legalName));
            }
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Splitit.Onboarding.Net.Client.ClientUtils.ParameterToMultiMap("", "Status", status));
            }

            localVarRequestOptions.Operation = "MerchantsApi.GetMerchants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMerchantsResponse>("/api/merchants/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMerchants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
